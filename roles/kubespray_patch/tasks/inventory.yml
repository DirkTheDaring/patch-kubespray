---
- name: Patch local_path_provisioner_enabled
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/addons.yml"
    regexp: "^local_path_provisioner_enabled:.*$"
    replace: "local_path_provisioner_enabled: {{ local_path_provisioner_enabled }}"
  when: local_path_provisioner_enabled is defined and local_path_provisioner_enabled

- name: Patch local_path_provisioner_claim_root
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/addons.yml"
    regexp: "^#[ ]+local_path_provisioner_claim_root:.*$"
    replace: "local_path_provisioner_claim_root: {{ local_path_provisioner_claim_root }}"
  when: local_path_provisioner_enabled is defined and local_path_provisioner_enabled

- name: Add  local_path_provisioner_enabled line
  ansible.builtin.lineinfile:
    dest: "{{ dest_folder }}/group_vars/k8s_cluster/addons.yml"
    # regexp: "^local_path_provisioner_enabled:.*$"
    insertafter: "^local_path_provisioner_enabled:.*$"
    line: "local_path_provisioner_is_default_storageclass: {{ local_path_provisioner_is_default_storageclass | default('false') }}"
  when: local_path_provisioner_enabled is defined and local_path_provisioner_enabled

- name: Patch apiserver_loadbalancer_domain_name
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/all/all.yml"
    regexp: "^## apiserver_loadbalancer_domain_name:.*$"
    replace: "apiserver_loadbalancer_domain_name: {% raw %}\"{{ kubespray_apiserver_loadbalancer_domain_name|default('') }}\"{%endraw%}"
  when:
    - apiserver_loadbalancer_domain_name is defined

# - name: Patch loadbalancer_apiserver
#   replace:
#     path: "{{ dest_folder }}/group_vars/all/all.yml"
#     regexp: "^# loadbalancer_apiserver:.*$"
#     replace: "{{ loadbalancer_apiserver }}"
#   when:
#   - loadbalancer_apiserver is defined
#   - kube_lodabalancer_apiserver_enabled

- name: Patch upstream dns_servers
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/all/all.yml"
    regexp: "^# upstream_dns_servers:"
    replace: "{{ upstream_dns_servers }}"

- name: Patch http_server variable
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/all/all.yml"
    regexp: "^# http_proxy:.*$"
    replace: "http_proxy: \"{{ http_proxy }}\""

- name: Patch https_server variable
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/all/all.yml"
    regexp: "^# https_proxy:.*$"
    replace: "https_proxy: \"{{ http_proxy }}\""

- name: Patch crio registry
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/all/cri-o.yml"
    regexp: "^# crio_registry_auth:"
    replace: "{{ crio_registry_auth }}"

- name: Patch helm_enabled
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/addons.yml"
    regexp: "^helm_enabled:.*$"
    replace: "helm_enabled: {{ helm_enabled }}"

- name: Patch metrics_server_enabled
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/addons.yml"
    regexp: "^metrics_server_enabled:.*$"
    replace: "metrics_server_enabled: \"{{ metrics_server_enabled }}\""

- name: Patch local_volume_provisioner_enabled
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/addons.yml"
    regexp: "^local_volume_provisioner_enabled:.*$"
    replace: "local_volume_provisioner_enabled: \"{{ local_volume_provisioner_enabled }}\""
  when: local_volume_provisioner_enabled is defined and local_volume_provisioner_enabled

- name: Patch kube_network_plugin
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^kube_network_plugin:.*$"
    replace: "kube_network_plugin: \"{{ kube_network_plugin }}\""

- name: Patch kube_version
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^kube_version:.*$"
    replace: "kube_version: \"{{ kube_version }}\""
  when: kube_version is defined

- name: Patch kube_service_addresses
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^kube_service_addresses:.*$"
    replace: "kube_service_addresses: {{ kube_service_addresses }}"
  when: kube_service_addresses is defined

- name: Patch kube_pods_subnet
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^kube_pods_subnet:.*$"
    replace: "kube_pods_subnet: {{ kube_pods_subnet }}"
  when: kube_pods_subnet is defined

- name: Patch kube_network_node_prefix
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^kube_network_node_prefix:.*$"
    replace: "kube_network_node_prefix: {{ kube_network_node_prefix }}"
  when: kube_network_node_prefix is defined

- name: Patch kube_proxy_strict_arp
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^kube_proxy_strict_arp:.*$"
    replace: "kube_proxy_strict_arp: {{ kube_proxy_strict_arp }}"

- name: Patch container_manager
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^container_manager:.*$"
    replace: "container_manager: {{ container_manager }}"

- name: Patch enable_nodelocaldns
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^enable_nodelocaldns:.*$"
    replace: "enable_nodelocaldns: {{ enable_nodelocaldns }}"

- name: Patch kube_oidc_auth
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^# kube_oidc_auth:.*$"
    replace: "kube_oidc_auth: {{ kube_oidc_auth }}"
  when:
    - kube_oidc_auth is defined
    - kube_oidc_enabled

- name: Patch kube_oidc_url
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^# kube_oidc_url:.*$"
    replace: "kube_oidc_url: \"{{ kube_oidc_url }}\""
  when:
    - kube_oidc_url is defined
    - kube_oidc_enabled

- name: Patch kube_oidc_client_id
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^# kube_oidc_client_id:.*$"
    replace: "kube_oidc_client_id: \"{{ kube_oidc_client_id }}\""
  when:
    - kube_oidc_client_id is defined
    - kube_oidc_enabled

- name: Patch kube_oidc_username_claim
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^# kube_oidc_username_claim:.*$"
    replace: "kube_oidc_username_claim: {{ kube_oidc_username_claim }}"
  when:
    - kube_oidc_username_claim is defined
    - kube_oidc_enabled

- name: Patch kube_oidc_username_prefix
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^# kube_oidc_username_prefix:.*$"
    replace: "kube_oidc_username_prefix: \"{{ kube_oidc_username_prefix }}\""
  when:
    - kube_oidc_username_prefix is defined
    - kube_oidc_enabled

- name: Patch kube_oidc_groups_claim
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^# kube_oidc_groups_claim:.*$"
    replace: "kube_oidc_groups_claim: {{ kube_oidc_groups_claim }}"
  when:
    - kube_oidc_groups_claim is defined
    - kube_oidc_enabled

- name: Patch kube_oidc_groups_prefix
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^# kube_oidc_groups_prefix:.*$"
    replace: "kube_oidc_groups_prefix: \"{{ kube_oidc_groups_prefix }}\""
  when:
    - kube_oidc_groups_prefix is defined
    - kube_oidc_enabled

- name: Patch cluster_name (usually to remove the dot, as this is not accepted by cilium)
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^cluster_name:.*$"
    replace: "cluster_name: {{ cluster_name | default('cluster.local') }}"
  when:
    - cluster_name is defined and cluster_name|length > 0

- name: Patch dns_domain to keep cluster.local local
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^dns_domain:.*$"
    replace: "dns_domain: {{ dns_domain | default('cluster.local') }}"
  when:
    - cluster_name is defined and cluster_name|length > 0


# - name: Patch cilium
#   replace:
#       path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-net-cilium.yml"
#       regexp: "^# see roles/network_plugin/cilium/defaults/main.yml.*$"
#       replace: "{{ cilium }}"
#   when: cilium is defined
- name: Prepare cilium patch
  ansible.builtin.set_fact:
    # ABSOLUTE HORRIBLE SOLUTION to prevent rendering of cilium_etcd_endpoints:
    #    the raw prevents the inner line from rendering the first time, the "}}" solution prevents that is rendered second time
    cilium: |-
      cilium_version: "{{ cilium_version }}"
      # cilium_identity_allocation_mode: kvstore # kvstore or crd

      # Optional features
      cilium_enable_prometheus: true

      # Hubble
      ### Enable Hubble without install
      cilium_enable_hubble: true
      ### Enable Hubble Metrics
      cilium_enable_hubble_metrics: true
      ### if cilium_enable_hubble_metrics: true
      cilium_hubble_metrics:
       - dns
       - drop
       - tcp
       - flow
       - icmp
       - http

      ### Enable Hubble install
      cilium_hubble_install: true
      ### Enable auto generate certs if cilium_hubble_install: true
      cilium_hubble_tls_generate: true

      # FIXME hardcoded in roles/network_plugin/cilium/templates/cilium-config.yml.j2
      # bpf-ct-global-any-max      262144
      # bpf-ct-global-tcp-max      524288

      cilium_preallocate_bpf_maps: true

      ## https: //github.com/cilium/cilium/issues/9117
      bpf-policy-map-max: "65536"
      cilium_clean_state: false
      cilium_clean_bpf_state: false
      cilium_config_extra_vars: {}
      cilium_hubble_enabled: true
      cilium_hubble_relay_enabled: true # default false
      cilium_hubble_ui_enabled: true # default false
      cilium_hubble_metrics_enabled: [ dns,drop,tcp,flow,port-distribution,icmp,http ]
      cilium_bpf_masquerade: true  # default false
      cilium_bpf_host_routing: false  # default true
      cilium_bpf_tproxy: true
      cilium_bpf_clock_probe: true # default false
      cilium_etcd_enabled: true # default false
      cilium_etcd_ssl: true # default false
      cilium_etcd_endpoints: "{% raw %}{{ "{{" }}{% endraw %} etcd_access_addresses.split(',') {% raw %}{{ "}}" }}{% endraw %}"
      cilium_labels: "k8s:k8s-app k8s:app k8s:name"
      cilium_local_redirect_policy: false
      cilium_prometheus_enabled: true # default false
      cilium_ingresscontroller_enabled: true # default false
      #
      # Hubble values
      #
      cilium_hubble_ui_ingress_enabled: {{ cilium_hubble_ui_ingress_enabled }}
      cilium_hubble_ui_ingress_annotations:
      {% for key, value in cilium_hubble_ui_ingress_annotations.items() %}
        {{ key }}: "{{ value }}"
      {% endfor %}
      cilium_hubble_ui_ingress_hosts: {{ cilium_hubble_ui_ingress_hosts }}
      #
      # Mesh
      #
      cilium_clustermesh_useapiserver: {{ cilium_clustermesh_useapiserver | default(false) }}
      cilium_cluster_name: {{ cilium_cluster_name }}
      cilium_cluster_id: {{ cilium_cluster_id }}
      #
      cilium_kube_proxy_replacement: {{ cilium_kube_proxy_replacement | default('partial') }}

      #
      mapDynamicSizeRatio: {{ cilium_bpf_map_dynamic_size_ratio | default("~") }}
      hostLegacyRouting: {{ cilium_enable_host_legacy_routing | default("~") }}
      ipv4NativeRoutingCIDR: "{{ cilium_ipv4_native_routing_cidr | default('') }}"
      ipv6NativeRoutingCIDR: "{{ cilium_ipv6_native_routing_cidr | default('') }}"

  when: cilium is not defined

- name: Append Cilium config
  ansible.builtin.lineinfile:
    path: "{{ dest_folder }}/group_vars/k8s_cluster/k8s-net-cilium.yml"
    line: "{{ cilium }}"
    # when: cilium is defined

- name: Patch containerd - add registries
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/all/containerd.yml"
    regexp: "^# containerd_registries:.*$"
    replace: |-
      containerd_registries:
      {% for item in containerd_registries %}
        "{{ item }}": "{{ containerd_registries[item] }}"
      {% endfor %}
  when: containerd_registries is defined and containerd_registries|length > 0

- name: Patch containerd - add authentication
  ansible.builtin.replace:
    path: "{{ dest_folder }}/group_vars/all/containerd.yml"
    regexp: "^# containerd_registry_auth:.*$"
    replace: |-
      containerd_registry_auth:
      {% for item in containerd_registry_auth %}
        - registry: {{ item.registry }}
          username: {{ item.username }}
          password: {{ item.password }}
      {% endfor %}
  when: containerd_registry_auth is defined and containerd_registry_auth|length > 0
